[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Projects/NOAAData/noaadata/src/main/scala/aridcommon.scala","languageId":"scala","version":1,"text":"\nimport org.apache.spark.sql.SparkSession\nimport scalafx.application.JFXApp\nimport org.apache.spark.sql.types.StructType\nimport org.apache.spark.sql.types.StructField\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.types.DateType\nimport org.apache.spark.sql.types.DoubleType\nimport org.apache.spark.sql.functions.col\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.functions._\nimport swiftvis2.plotting._\nimport swiftvis2.plotting.ColorGradient\nimport swiftvis2.plotting.renderer.SwingRenderer\n\n\nobject aridcommon extends JFXApp {\n  val spark = SparkSession.builder().master(\"local[*]\").appName(\"NOAA Data\").getOrCreate()\n  import spark.implicits._\n  \n  spark.sparkContext.setLogLevel(\"WARN\")\n  \n  val tschema = StructType(Array(\n      StructField(\"sid\",StringType),\n      StructField(\"date\",DateType),\n      StructField(\"mtype\",StringType),\n      StructField(\"value\",DoubleType)\n      ))\n    \n  val data2022 = spark.read.schema(tschema).option(\"dateFormat\", \"yyyyMMdd\").csv(\"src/main/scala/data/2022.csv\").cache()\n  val data1972 = spark.read.schema(tschema).option(\"dateFormat\", \"yyyyMMdd\").csv(\"src/main/scala/data/1972.csv\").cache()\n  \n  val sschema = StructType(Array(\n      StructField(\"sid\", StringType),\n      StructField(\"lat\", DoubleType),\n      StructField(\"lon\", DoubleType),\n      StructField(\"name\", StringType)\n      ))\n  val stationRDD = spark.sparkContext.textFile(\"src/main/scala/data/ghcnd-stations.txt\").map { line =>\n    val id = line.substring(0, 11)\n    val lat = line.substring(12, 20).toDouble\n    val lon = line.substring(21, 30).toDouble\n    val name = line.substring(41, 71)\n    Row(id, lat, lon, name)\n  }\n  val stations = spark.createDataFrame(stationRDD, sschema).cache()\n  \n  val prcp2022 = data2022.filter($\"mtype\" === \"PRCP\").limit(10000000).drop(\"mtype\").withColumnRenamed(\"value\", \"prcp\")\n  val dailyPrp2022 = prcp2022.select('sid, 'date, ('prcp)*10 as \"pri2022\")\n  val stationPrp2022 = dailyPrp2022.groupBy('sid).agg(avg('pri2022) as \"pri2022\")\n  val joinedData2022 = stationPrp2022.join(stations, \"sid\")\n\n  val prcp1972 = data1972.filter($\"mtype\" === \"PRCP\").limit(10000000).drop(\"mtype\").withColumnRenamed(\"value\", \"prcp\")\n  val dailyPrp1972 = prcp1972.select('sid, 'date, ('prcp)*10 as \"pri1972\")\n  val stationPrp1972 = dailyPrp1972.groupBy('sid).agg(avg('pri1972) as \"pri1972\")\n  \n  val combinedData = stationPrp1972.join(joinedData2022,\"sid\")\n  \n  //val lons = combinedData.select('lon).as[Double].collect()\n  //val lats = combinedData.select('lat).as[Double].collect()\n\n  val downs = combinedData.filter(col(\"pri1972\") < 250.0)\n  val lonsdowns = downs.select('lon).as[Double].collect()\n  val latsdowns = downs.select('lat).as[Double].collect()\n  val varidowns = downs.select('pri1972).as[Double].collect()\n\n  val ups = combinedData.filter(col(\"pri2022\") < 250.0)\n  val lonsups = ups.select('lon).as[Double].collect()\n  val latsups = ups.select('lat).as[Double].collect()\n  val variups = ups.select('pri2022).as[Double].collect()\n\n  println(varidowns.length)\n  println(variups.length)\n  \n  \n  {\n    val cg = ColorGradient(0.0 -> RedARGB)\n    val plot1 = Plot.scatterPlot(lonsups, latsups, title = \"Semi-Arid stations in 2022\", xLabel = \"Longitude\", \n        yLabel = \"Latitude\", symbolSize = 3, cg(variups))\n    SwingRenderer(plot1, 900, 700)\n  }\n  {\n    val cg = ColorGradient(0.0 -> BlueARGB)\n    val plot2 = Plot.scatterPlot(lonsdowns, latsdowns, title = \"Semi-Arid stations in 1972\", xLabel = \"Longitude\", \n        yLabel = \"Latitude\", symbolSize = 3, cg(varidowns))\n    SwingRenderer(plot2, 900, 700)\n  }\n\nspark.stop()\n}\n\n\n\n\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Projects\NOAAData\noaadata\target\scala-2.12\zinc\inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed 13 Feb, 2023 4:33:45 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Projects/NOAAData/noaadata/src/main/scala/Ditemp1972.scala","languageId":"scala","version":1,"text":"\nimport org.apache.spark.sql.SparkSession\nimport scalafx.application.JFXApp\nimport org.apache.spark.sql.types.StructType\nimport org.apache.spark.sql.types.StructField\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.types.DateType\nimport org.apache.spark.sql.types.DoubleType\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.functions._\nimport swiftvis2.plotting._\nimport swiftvis2.plotting.ColorGradient\nimport swiftvis2.plotting.renderer.SwingRenderer\n\n\nobject Ditemp1972 extends JFXApp {\n  val spark = SparkSession.builder().master(\"local[*]\").appName(\"NOAA Data\").getOrCreate()\n  import spark.implicits._\n  \n  spark.sparkContext.setLogLevel(\"WARN\")\n  \n  val tschema = StructType(Array(\n      StructField(\"sid\",StringType),\n      StructField(\"date\",DateType),\n      StructField(\"mtype\",StringType),\n      StructField(\"value\",DoubleType)\n      ))\n    \n  val data2022 = spark.read.schema(tschema).option(\"dateFormat\", \"yyyyMMdd\").csv(\"src/main/scala/data/2022.csv\").cache()\n  val data1972 = spark.read.schema(tschema).option(\"dateFormat\", \"yyyyMMdd\").csv(\"src/main/scala/data/1972.csv\").cache()\n  \n  val sschema = StructType(Array(\n      StructField(\"sid\", StringType),\n      StructField(\"lat\", DoubleType),\n      StructField(\"lon\", DoubleType),\n      StructField(\"name\", StringType)\n      ))\n  val stationRDD = spark.sparkContext.textFile(\"src/main/scala/data/ghcnd-stations.txt\").map { line =>\n    val id = line.substring(0, 11)\n    val lat = line.substring(12, 20).toDouble\n    val lon = line.substring(21, 30).toDouble\n    val name = line.substring(41, 71)\n    Row(id, lat, lon, name)\n  }\n  val stations = spark.createDataFrame(stationRDD, sschema).cache()\n  \n  val tmax2022 = data2022.filter($\"mtype\" === \"TMAX\").limit(10000000).drop(\"mtype\").withColumnRenamed(\"value\", \"tmax\")\n  val tmin2022 = data2022.filter('mtype === \"TMIN\").limit(10000000).drop(\"mtype\").withColumnRenamed(\"value\", \"tmin\")\n  val combinedTemps2022 = tmax2022.join(tmin2022, Seq(\"sid\", \"date\"))\n  val dailyTemp2022 = combinedTemps2022.select('sid, 'date, ('tmax - 'tmin)/10 as \"tave2022\")\n  val stationTemp2022 = dailyTemp2022.groupBy('sid).agg(avg('tave2022) as \"tave2022\")\n  val joinedData2022 = stationTemp2022.join(stations, \"sid\")\n\n  val tmax1972 = data1972.filter($\"mtype\" === \"TMAX\").limit(10000000).drop(\"mtype\").withColumnRenamed(\"value\", \"tmax\")\n  val tmin1972 = data1972.filter('mtype === \"TMIN\").limit(10000000).drop(\"mtype\").withColumnRenamed(\"value\", \"tmin\")\n  val combinedTemps1972 = tmax1972.join(tmin1972, Seq(\"sid\", \"date\"))\n  val dailyTemp1972 = combinedTemps1972.select('sid, 'date, ('tmax - 'tmin)/10 as \"tave1972\")\n  val stationTemp1972 = dailyTemp1972.groupBy('sid).agg(avg('tave1972) as \"tave1972\")\n\n  val combinedData = stationTemp1972.join(joinedData2022,\"sid\")\n\n  combinedData.show()\n  combinedData.schema.printTreeString()\n  \n  \n  val filteredData = combinedData.select('lon, 'lat, 'tave1972,'tave2022).as[(Double, Double, Double,Double)].collect()\n  //val redpoints = joinedData2022.filter('tave >= 17.0).select('lon, 'lat, 'tave).as[(Double, Double, Double)].collect()\n  //val bluepoints = joinedData2022.filter('tave <= 7.0).select('lon, 'lat, 'tave).as[(Double, Double, Double)].collect()\n  //val greenpoints = joinedData2022.filter('tave > 7.0 && 'tave < 17).select('lon, 'lat, 'tave).as[(Double, Double, Double)].collect()\n  val sizeredpoints1972 = filteredData.count(_._3 > 16.0)\n  val sizebluepoints1972 = filteredData.count(_._3 <= 10.0)\n  val sizegreenpoints1972 = filteredData.count(_._3 > 10.0) - sizeredpoints1972\n\n  val sizeredpoints2022 = filteredData.count(_._4 > 16.0)\n  val sizebluepoints2022 = filteredData.count(_._4 <= 10.0)\n  val sizegreenpoints2022 = filteredData.count(_._4 > 10.0) - sizeredpoints2022\n  println(sizeredpoints1972)\n  println(sizebluepoints1972)\n  println(sizegreenpoints1972)\n\n  println(sizeredpoints2022)\n  println(sizebluepoints2022)\n  println(sizegreenpoints2022)\n\n  val lons = combinedData.select('lon).as[Double].collect()\n  val lats = combinedData.select('lat).as[Double].collect()\n  val taves1972 = combinedData.select('tave1972).as[Double].collect()\n  val taves2022 = combinedData.select('tave2022).as[Double].collect()\n\n  {\n    val cg = ColorGradient(6.0 -> BlueARGB, 10.0 -> GreenARGB, 16.0 -> RedARGB)\n    val plot = Plot.scatterPlot(lons, lats, title = \"Diurnal Temps 1972\", xLabel = \"Longitude\", \n    yLabel = \"Latitude\", symbolSize = 3, cg(taves1972))\n    SwingRenderer(plot, 800, 600)\n  }\n  {\n    val cg = ColorGradient(6.0 -> BlueARGB, 10.0 -> GreenARGB, 16.0 -> RedARGB)\n    val plot = Plot.scatterPlot(lons, lats, title = \"Diurnal Temps 2022\", xLabel = \"Longitude\", \n    yLabel = \"Latitude\", symbolSize = 3, cg(taves2022))\n    SwingRenderer(plot, 800, 600)\n  }\n\nspark.stop()\n}\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
